{"version":3,"file":"static/js/407.cdb2d1f6.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/Contactitem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { selectIsLoggedIn } from 'redux/auth/selectors';\nimport { addContact, fetchContacts } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  console.log('contacts', contacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    reset();\n\n    contacts &&\n    contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : dispatch(addContact({ name, number }));\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value.trim());\n\n        break;\n      case 'number':\n        setNumber(value.trim());\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <form onSubmit={handleSubmit} style={{ display: 'flex', gap: '15px' }}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\nexport default ContactForm;\n\n// CREATED BY REDUX\n\n// import React, { useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from 'redux/contactsSlice';\n// import { getContacts } from 'redux/selectors';\n\n// const ContactForm = () => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(getContacts);\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n\n//     contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n//       ? alert(`${name} is already in contacts`)\n//       : dispatch(addContact(name, number));\n\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   const handleChange = event => {\n//     const { name, value } = event.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value.trim());\n\n//         break;\n//       case 'number':\n//         setNumber(value.trim());\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit} style={{ display: 'flex', gap: '15px' }}>\n//       <label>\n//         Name\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           value={name}\n//           onChange={handleChange}\n//         />\n//       </label>\n//       <label>\n//         Number\n//         <input\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           value={number}\n//           onChange={handleChange}\n//         />\n//       </label>\n\n//       <button type=\"submit\">Add contact</button>\n//     </form>\n//   );\n// };\n// export default ContactForm;\n\n// CREATED BY HOOKS\n\n// import React, { useState } from 'react';\n// import { nanoid } from 'nanoid';\n// import PropTypes from 'prop-types';\n\n// const ContactForm = ({ onSubmit }) => {\n//   PropTypes.ContactForm = {\n//     contacts: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         id: PropTypes.string.isRequired,\n//         name: PropTypes.string.isRequired,\n//         number: PropTypes.string.isRequired,\n//       }).isRequired\n//     ),\n//     filter: PropTypes.string.isRequired,\n//   };\n\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n//   const [id, setId] = useState(() => nanoid());\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n//     setId(nanoid());\n//     onSubmit({ name, number, id });\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   const handleChange = event => {\n//     const { name, value } = event.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value.trim());\n\n//         break;\n//       case 'number':\n//         setNumber(value.trim());\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit} style={{ display: 'flex', gap: '15px' }}>\n//       <label>\n//         Name\n//         <input\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           value={name}\n//           onChange={handleChange}\n//         />\n//       </label>\n//       <label>\n//         Number\n//         <input\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           value={number}\n//           onChange={handleChange}\n//         />\n//       </label>\n\n//       <button type=\"submit\">Add contact</button>\n//     </form>\n//   );\n// };\n// export default ContactForm;\n\n// CREATED BY CLASS\n\n// class ContactForm extends Component {\n//   static defaultPropTypes = {\n//     contacts: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         id: PropTypes.string.isRequired,\n//         name: PropTypes.string.isRequired,\n//         number: PropTypes.string.isRequired,\n//       }).isRequired\n//     ),\n//     filter: PropTypes.string.isRequired,\n//   };\n\n//   state = { name: '', number: '', id: nanoid() };\n\n//   handleChange = event => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSumit = event => {\n//     event.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => this.setState({ name: '', number: '' });\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form\n//         onSubmit={this.handleSumit}\n//         style={{ display: 'flex', gap: '15px' }}\n//       >\n//         <label>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//             value={name}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n//         <label>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//             value={number}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n\n//         <button type=\"submit\">Add contact</button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const Delete = styled.button`\n  background-color: orangered;\n  border-radius: 5px;\n  color: lightgray;\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Delete } from './Contactitem.styled';\n\nconst ContactItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <>\n      <p>{name} :</p>\n      <p>{number}</p>\n      <Delete onClick={() => handleDelete(id)}>Delete</Delete>\n    </>\n  );\n};\n\nexport default ContactItem;\n\n//  CREATE BY REDUX\n\n// import { useDispatch } from 'react-redux';\n// import { deleteContact } from 'redux/contactsSlice';\n// import { Delete } from './Contactitem.styled';\n\n// const ContactItem = ({ contact: { name, phone, id } }) => {\n//   const dispatch = useDispatch();\n//   const handleDelete = () => dispatch(deleteContact(id));\n\n//   return (\n//     <>\n//       <p>{name} :</p>\n//       <p>{phone}</p>\n//       <Delete onClick={handleDelete}>Delete</Delete>\n//     </>\n//   );\n// };\n\n// export default ContactItem;\n\n// CREATED BY HOOK\n\n// import PropTypes from 'prop-types';\n// import { Delete } from './Contactitem.styled';\n\n// const ContactItem = ({ name, number, onDeleteContact }) => {\n//   return (\n//     <>\n//       <p>{name} :</p>\n//       <p>{number}</p>\n//       <Delete onClick={onDeleteContact}>Delete</Delete>\n//     </>\n//   );\n// };\n\n// ContactItem.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// export default ContactItem;\n","import ContactItem from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n\nexport const getFilter = state => state.filter;\n\nconst ContactList = () => {\n  const filterValue = useSelector(getFilter);\n  const contacts = useSelector(selectAllContacts);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filterValue.toLocaleLowerCase();\n    return filterValue\n      ? contacts.filter(contact =>\n          contact.name.toLocaleLowerCase().includes(normalizedFilter)\n        )\n      : contacts;\n  };\n  const filteredContacts = getVisibleContacts();\n  return (\n    <ul>\n      {contacts &&\n        filteredContacts.map(contact => (\n          <li\n            key={contact.id}\n            style={{\n              display: 'grid',\n              gridTemplateColumns: '160px 150px 100px',\n              alignItems: 'center',\n            }}\n          >\n            <ContactItem contact={contact} />\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { getFilter } from 'components/ContactList/ContactList';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(getFilter);\n\n  return (\n    <label htmlFor=\"\">\n      <input\n        type=\"text\"\n        placeholder=\"Find contacts by name\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={e => dispatch(setFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\nexport default Contacts;\n"],"names":["selectAllContacts","state","contacts","items","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","console","log","reset","handleChange","event","target","value","trim","useEffect","fetchContacts","onSubmit","preventDefault","find","contact","toLowerCase","alert","addContact","style","display","gap","type","pattern","title","required","onChange","Delete","styled","id","onClick","deleteContact","handleDelete","getFilter","filter","filterValue","filteredContacts","normalizedFilter","toLocaleLowerCase","includes","getVisibleContacts","map","gridTemplateColumns","alignItems","htmlFor","placeholder","e","setFilter"],"sourceRoot":""}